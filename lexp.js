/* Version 21238.1155 */
/** lexpjs - Copyright (C) 2018,2021 Patrick H. Rigney, All Rights Reserved
 *  See https://github.com/toggledbits/lexpjs
 *
 *  This Software is open source offered under the MIT LICENSE. See https://opensource.org/licenses/MIT
 *
s *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 *  documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 *  to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 *  the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 *  THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 *  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

const version = 21224;

const FEATURE_MONTH_BASE = 1;       /* 1 = months 1-12; set to 0 if you prefer JS semantics where 0=Jan,11=Dec */
const MAX_RANGE = 1000;          /* Maximum number of elements in a result range op result array */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.lexp = factory();
    }
}(typeof self !== 'undefined' ? self : this, function () {

/* --------------------------------- generated grammar (DO NOT EDIT) ------------------------------- */

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,8],$V2=[1,26],$V3=[1,25],$V4=[1,4],$V5=[1,5],$V6=[1,6],$V7=[1,7],$V8=[1,9],$V9=[1,10],$Va=[1,11],$Vb=[1,12],$Vc=[1,14],$Vd=[1,15],$Ve=[1,16],$Vf=[1,17],$Vg=[1,18],$Vh=[1,19],$Vi=[1,22],$Vj=[1,23],$Vk=[1,24],$Vl=[1,28],$Vm=[1,29],$Vn=[5,6,8,18,64,65,76],$Vo=[1,36],$Vp=[1,30],$Vq=[1,31],$Vr=[1,32],$Vs=[1,33],$Vt=[1,34],$Vu=[1,35],$Vv=[1,37],$Vw=[1,38],$Vx=[1,39],$Vy=[1,40],$Vz=[1,41],$VA=[1,42],$VB=[1,43],$VC=[1,44],$VD=[1,45],$VE=[1,46],$VF=[1,47],$VG=[1,48],$VH=[1,49],$VI=[1,50],$VJ=[1,51],$VK=[1,52],$VL=[1,53],$VM=[1,54],$VN=[1,55],$VO=[1,56],$VP=[1,63],$VQ=[1,64],$VR=[5,6,8,14,18,22,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,63,64,65,74,76],$VS=[5,6,8,12,13,14,15,16,18,22,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,63,64,65,74,76],$VT=[6,57],$VU=[6,14],$VV=[5,6,8,14,18,22,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,63,64,65,74,76],$VW=[5,6,8,14,18,22,27,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,63,64,65,74,76],$VX=[5,6,8,14,18,22,31,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,63,64,65,74,76],$VY=[5,6,8,14,18,22,39,40,41,42,43,53,54,55,57,63,64,65,74,76],$VZ=[5,6,8,14,18,22,39,40,41,42,43,44,45,46,47,48,53,54,55,57,63,64,65,74,76],$V_=[5,6,8,14,18,22,53,54,55,57,63,64,65,74,76],$V$=[5,6,8,14,18,22,57,63,64,65,74,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"expr_list":4,"EOF":5,"COMMA":6,"e":7,"EXPRSEP":8,"arg_list":9,"ref_expr":10,"IDENTIFIER":11,"DOT":12,"[":13,"]":14,"QDOT":15,"QBRACKET":16,"(":17,")":18,"quoted_string":19,"QSTR":20,"dict_element":21,"COLON":22,"dict_elements":23,"element_list":24,"array_elements":25,"array_list":26,"-":27,"LNOT":28,"BNOT":29,"POW":30,"RANGE":31,"*":32,"/":33,"MOD":34,"+":35,"<<":36,">>":37,">>>":38,"BAND":39,"BOR":40,"BXOR":41,"LAND":42,"LOR":43,"==":44,"!=":45,"===":46,"!==":47,"IN":48,"<":49,"<=":50,">":51,">=":52,"COALESCE":53,"COALESCENAN":54,"?":55,"LCURLY":56,"RCURLY":57,"NUMBER":58,"HEXNUM":59,"OCTNUM":60,"BINNUM":61,"IF":62,"THEN":63,"ELSE":64,"ENDIF":65,"TRUE":66,"FALSE":67,"NULL":68,"NAN":69,"INF":70,"ASSIGN":71,"EACH":72,"FIRST":73,"WITH":74,"DO":75,"DONE":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"COMMA",8:"EXPRSEP",11:"IDENTIFIER",12:"DOT",13:"[",14:"]",15:"QDOT",16:"QBRACKET",17:"(",18:")",20:"QSTR",22:"COLON",27:"-",28:"LNOT",29:"BNOT",30:"POW",31:"RANGE",32:"*",33:"/",34:"MOD",35:"+",36:"<<",37:">>",38:">>>",39:"BAND",40:"BOR",41:"BXOR",42:"LAND",43:"LOR",44:"==",45:"!=",46:"===",47:"!==",48:"IN",49:"<",50:"<=",51:">",52:">=",53:"COALESCE",54:"COALESCENAN",55:"?",56:"LCURLY",57:"RCURLY",58:"NUMBER",59:"HEXNUM",60:"OCTNUM",61:"BINNUM",62:"IF",63:"THEN",64:"ELSE",65:"ENDIF",66:"TRUE",67:"FALSE",68:"NULL",69:"NAN",70:"INF",71:"ASSIGN",72:"EACH",73:"FIRST",74:"WITH",75:"DO",76:"DONE"},
productions_: [0,[3,2],[4,3],[4,3],[4,1],[9,1],[9,0],[10,1],[10,3],[10,4],[10,3],[10,4],[10,4],[10,3],[19,1],[21,3],[21,5],[21,3],[23,3],[23,1],[24,1],[24,0],[25,3],[25,1],[26,1],[26,0],[7,2],[7,2],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,5],[7,3],[7,3],[7,1],[7,1],[7,1],[7,1],[7,1],[7,7],[7,5],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[7,6],[7,8],[7,6],[7,8],[7,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3:
 $$[$0-2].expr.push( $$[$0] ); this.$ = $$[$0-2]; 
break;
case 4:
 this.$ = atom( 'list', { expr: [ $$[$0] ] } ); 
break;
case 5: case 20: case 24: case 62: case 70:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = atom( 'list', { expr: [] } ); 
break;
case 7:
 this.$ = atom( 'vref', { name: $$[$0] } ); 
break;
case 8:
 this.$ = atom( 'deref', { context: $$[$0-2], member: $$[$0], locs: [_$[$0-2], _$[$0]] } ); 
break;
case 9:
 this.$ = atom( 'deref', { context: $$[$0-3], member: $$[$0-1], locs: [_$[$0-3], _$[$0-1]] } ); 
break;
case 10:
 this.$ = atom( 'deref', { context: $$[$0-2], member: $$[$0], locs: [_$[$0-2], _$[$0]], op: $$[$0-1] } ); 
break;
case 11:
 this.$ = atom( 'deref', { context: $$[$0-3], member: $$[$0-1], locs: [_$[$0-3], _$[$0-1]], op: $$[$0-2] } ); 
break;
case 12:
 this.$ = atom( 'fref', { name: $$[$0-3], args: is_atom( $$[$0-1], 'list') ? ($$[$0-1]).expr : [ $$[$0-1] ], locs: [_$[$0-3]] } ); 
break;
case 13: case 56: case 57: case 76:
 this.$ = $$[$0-1]; 
break;
case 14:
 this.$ = buffer; 
break;
case 15: case 17:
 this.$ = { key: $$[$0-2], value: $$[$0] }; 
break;
case 16:
 this.$ = { key: $$[$0-3], value: $$[$0] }; 
break;
case 18:
 ($$[$0-2])[($$[$0]).key] = ($$[$0]).value; this.$ = $$[$0-2]; 
break;
case 19:
 this.$ = { [($$[$0]).key]: ($$[$0]).value }; 
break;
case 21:
 this.$ = {}; 
break;
case 22:
 $$[$0-2].push( $$[$0] ); this.$ = $$[$0-2]; 
break;
case 23:
 this.$ = [ $$[$0] ]; 
break;
case 25:
 this.$ = []; 
break;
case 26:
 this.$ = atom( 'unop', { op: '-', val: $$[$0] } ); 
break;
case 27:
 this.$ = atom( 'unop', { op: '!', val: $$[$0] } ); 
break;
case 28:
 this.$ = atom( 'unop', { op: '~', val: $$[$0] } ); 
break;
case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:
 this.$ = atom( 'binop', { op: $$[$0-1], v1: $$[$0-2], v2: $$[$0], locs: [_$[$0-2],_$[$0]] } ); 
break;
case 42:
 this.$ = atom( 'binop', { op: '&&', v1: $$[$0-2], v2: $$[$0], locs: [_$[$0-2],_$[$0]] } ); 
break;
case 43:
 this.$ = atom( 'binop', { op: '||', v1: $$[$0-2], v2: $$[$0], locs: [_$[$0-2],_$[$0]] } ); 
break;
case 55:
 this.$ = atom( 'if', { test: $$[$0-4], tc: $$[$0-2], fc: $$[$0], locs: [_$[$0-4], _$[$0-2], _$[$0]] } ); 
break;
case 58:
 this.$ = Number(yytext); 
break;
case 59:
 this.$ = parseInt( yytext.substr( 2 ), 16 ); 
break;
case 60:
 this.$ = parseInt( yytext.substr( 2 ), 8 ); 
break;
case 61:
 this.$ = parseInt( yytext.substr( 2 ), 2 ); 
break;
case 63:
 this.$ = atom( 'if', { test: $$[$0-5], tc: $$[$0-3], fc: $$[$0-1], locs: [_$[$0-5], _$[$0-3], _$[$0-1]] } ); 
break;
case 64:
 this.$ = atom( 'if', { test: $$[$0-3], tc: $$[$0-1], locs: [_$[$0-3], _$[$0-1]] } ); 
break;
case 65:
 this.$ = true; 
break;
case 66:
 this.$ = false; 
break;
case 67:
 this.$ = null; 
break;
case 68:
 this.$ = NaN; 
break;
case 69:
 this.$ = Infinity; 
break;
case 71:
 this.$ = atom( 'binop', { 'op': $$[$0-1], v1: atom( 'vref', { name: $$[$0-2] } ), v2: $$[$0], locs: [_$[$0-2], _$[$0]] } ); 
break;
case 72:
 this.$ = atom( 'iter', { value: $$[$0-4], context: $$[$0-2], exec: $$[$0] } ); 
break;
case 73:
 this.$ = atom( 'iter', { value: $$[$0-6], key: $$[$0-4], context: $$[$0-2], exec: $$[$0] } ); 
break;
case 74:
 this.$ = atom( 'search', { value: $$[$0-4], context: $$[$0-2], exec: $$[$0] } ); 
break;
case 75:
 this.$ = atom( 'search', { value: $$[$0-6], key: $$[$0-4], context: $$[$0-2], exec: $$[$0] } ); 
break;
}
},
table: [{3:1,4:2,7:3,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{1:[3]},{5:[1,27],6:$Vl,8:$Vm},o($Vn,[2,4],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{7:57,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:58,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:59,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{11:$VP,13:$VQ,19:65,20:$V3,21:62,23:61,24:60,57:[2,21]},{7:68,10:20,11:$V0,13:$V1,14:[2,25],17:$V2,19:13,20:$V3,25:67,26:66,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VR,[2,58]),o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),{7:69,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VR,[2,65]),o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,70],{12:[1,70],13:[1,71],15:[1,72],16:[1,73]}),o($VS,[2,7],{17:[1,75],71:[1,74]}),{11:[1,76]},{11:[1,77]},{4:78,7:3,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VR,[2,14]),{7:79,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{1:[2,1]},{7:80,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:81,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:82,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:83,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:84,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:85,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:86,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:87,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:88,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:89,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:90,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:91,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:92,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:93,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:94,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:95,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:96,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:97,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:98,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:99,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:100,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:101,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:102,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:103,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:104,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:105,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:106,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:107,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:108,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VR,[2,26]),o($VR,[2,27]),o($VR,[2,28]),{57:[1,109]},{6:[1,110],57:[2,20]},o($VT,[2,19]),{22:[1,111]},{19:112,20:$V3},{22:[1,113]},{14:[1,114]},{6:[1,115],14:[2,24]},o($VU,[2,23],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,63:[1,116]},{11:[1,117]},{7:118,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{11:[1,119]},{7:120,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:121,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{4:123,7:3,9:122,10:20,11:$V0,13:$V1,17:$V2,18:[2,6],19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{6:[1,125],48:[1,124]},{6:[1,127],48:[1,126]},{6:$Vl,8:$Vm,76:[1,128]},{18:[1,129],27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO},o($Vn,[2,2],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),o($Vn,[2,3],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),o($VV,[2,29],{30:$Vp}),o([5,6,8,14,18,22,31,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,63,64,65,74,76],[2,30],{27:$Vo,30:$Vp,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx}),o($VV,[2,31],{30:$Vp}),o($VV,[2,32],{30:$Vp}),o($VV,[2,33],{30:$Vp}),o($VW,[2,34],{30:$Vp,32:$Vr,33:$Vs,34:$Vt}),o($VW,[2,35],{30:$Vp,32:$Vr,33:$Vs,34:$Vt}),o($VX,[2,36],{27:$Vo,30:$Vp,32:$Vr,33:$Vs,34:$Vt,35:$Vu}),o($VX,[2,37],{27:$Vo,30:$Vp,32:$Vr,33:$Vs,34:$Vt,35:$Vu}),o($VX,[2,38],{27:$Vo,30:$Vp,32:$Vr,33:$Vs,34:$Vt,35:$Vu}),o($VY,[2,39],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o([5,6,8,14,18,22,40,42,43,53,54,55,57,63,64,65,74,76],[2,40],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,41:$VA,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o([5,6,8,14,18,22,40,41,42,43,53,54,55,57,63,64,65,74,76],[2,41],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o([5,6,8,14,18,22,42,43,53,54,55,57,63,64,65,74,76],[2,42],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o([5,6,8,14,18,22,43,53,54,55,57,63,64,65,74,76],[2,43],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o($VY,[2,44],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o($VY,[2,45],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o($VY,[2,46],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o($VY,[2,47],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o([5,6,8,14,18,22,39,40,41,42,43,44,45,46,47,53,54,55,57,63,64,65,74,76],[2,48],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,49:$VI,50:$VJ,51:$VK,52:$VL}),o($VZ,[2,49],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx}),o($VZ,[2,50],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx}),o($VZ,[2,51],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx}),o($VZ,[2,52],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx}),o($V_,[2,53],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),o($V_,[2,54],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL}),{22:[1,130],27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO},o($VR,[2,56]),{11:$VP,13:$VQ,19:65,20:$V3,21:131},{7:132,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{14:[1,133]},{7:134,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VR,[2,57]),{7:135,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{4:136,7:3,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VS,[2,8]),{14:[1,137],27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO},o($VS,[2,10]),{14:[1,138],27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO},o($V$,[2,71],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{18:[1,139]},{6:$Vl,8:$Vm,18:[2,5]},{7:140,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{11:[1,141]},{7:142,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{11:[1,143]},o($VR,[2,76]),o($VS,[2,13]),{7:144,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VT,[2,18]),o($VT,[2,15],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{22:[1,145]},o($VT,[2,17],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),o($VU,[2,22],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{6:$Vl,8:$Vm,64:[1,146],65:[1,147]},o($VS,[2,9]),o($VS,[2,11]),o($VS,[2,12]),{22:[1,148],27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO},{48:[1,149]},{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,74:[1,150]},{48:[1,151]},o([5,6,8,14,18,22,55,57,63,64,65,74,76],[2,55],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),{7:152,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{4:153,7:3,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VR,[2,64]),{7:154,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:155,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:156,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:157,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($VT,[2,16],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{6:$Vl,8:$Vm,65:[1,158]},o($V$,[2,72],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{22:[1,159],27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO},o($V$,[2,74],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,74:[1,160]},o($VR,[2,63]),{7:161,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},{7:162,10:20,11:$V0,13:$V1,17:$V2,19:13,20:$V3,27:$V4,28:$V5,29:$V6,56:$V7,58:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi,73:$Vj,75:$Vk},o($V$,[2,73],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO}),o($V$,[2,75],{27:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO})],
defaultActions: {27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var buffer = "", qsep = "";

    function is_atom( v, typ ) {
        return null !== v && "object" === typeof( v ) &&
            "undefined" !== typeof v.__atom &&
            ( !typ || v.__atom === typ );
    }

    function atom( t, vs ) {
        var a = { __atom: t };
        Object.keys(vs || {}).forEach( function( key ) {
            a[key] = vs[key];
        });
        return a;
    }

    function D( ...args ) {
        console.log( ...args );
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("STRD"); buffer = ""; 
break;
case 1: this.begin("STRS"); buffer = ""; 
break;
case 2: this.begin("STRB"); buffer = ""; 
break;
case 3: buffer += String.fromCharCode( parseInt( yy_.yytext.substring( 2 ), 16 ) ); 
break;
case 4: buffer += String.fromCodePoint( parseInt( yy_.yytext.substring( 2 ), 16 ) ); 
break;
case 5: buffer += String.fromCodePoint( parseInt( yy_.yytext.slice( 3, -1 ), 16 ) ); 
break;
case 6: buffer += "\0"; 
break;
case 7: buffer += "'"; 
break;
case 8: buffer += '"'; 
break;
case 9: buffer += '`'; 
break;
case 10: buffer += "\\"; 
break;
case 11: buffer += "\n"; 
break;
case 12: buffer += "\r"; 
break;
case 13: buffer += "\v"; 
break;
case 14: buffer += "\t"; 
break;
case 15: buffer += "\b"; 
break;
case 16: buffer += "\f"; 
break;
case 17: /* escape EOL: discard */ 
break;
case 18: buffer += yy_.yytext.charAt( 1 ); /* bogus escape => literal char */ 
break;
case 19: buffer += yy_.yytext; 
break;
case 20: return 'EOF_IN_STRING'; 
break;
case 21: this.popState(); return 20; 
break;
case 22: this.popState(); return 20; 
break;
case 23: this.popState(); return 20; 
break;
case 24: buffer += yy_.yytext; 
break;
case 25: /* skip whitespace */ 
break;
case 26: /* skip */ 
break;
case 27: /* skip */ 
break;
case 28: return 6; 
break;
case 29: return 8; 
break;
case 30: return 66; 
break;
case 31: return 67; 
break;
case 32: return 68; 
break;
case 33: return 73; 
break;
case 34: return 74; 
break;
case 35: return 72; 
break;
case 36: return 69; 
break;
case 37: return 70; 
break;
case 38: return 62; 
break;
case 39: return 63; 
break;
case 40: return 64; 
break;
case 41: return 65; 
break;
case 42: return 48; 
break;
case 43: return 76; 
break;
case 44: return 75; 
break;
case 45: return 42; 
break;
case 46: return 43; 
break;
case 47: return 28; 
break;
case 48: return 11; 
break;
case 49: return 58; 
break;
case 50: return 59; 
break;
case 51: return 60; 
break;
case 52: return 61; 
break;
case 53: return 31; 
break;
case 54: return 22; 
break;
case 55: return 30; 
break;
case 56: return 32; 
break;
case 57: return 33; 
break;
case 58: return 34; 
break;
case 59: return 27; 
break;
case 60: return 35; 
break;
case 61: return 38; 
break;
case 62: return 36; 
break;
case 63: return 37; 
break;
case 64: return 50; 
break;
case 65: return 52; 
break;
case 66: return 49; 
break;
case 67: return 51; 
break;
case 68: return 46; 
break;
case 69: return 44; 
break;
case 70: return 47; 
break;
case 71: return 45; 
break;
case 72: return 45; 
break;
case 73: return 41; 
break;
case 74: return 42; 
break;
case 75: return 43; 
break;
case 76: return 28; 
break;
case 77: return 39; 
break;
case 78: return 40; 
break;
case 79: return 29; 
break;
case 80: return 53; 
break;
case 81: return 54 
break;
case 82: return 15; 
break;
case 83: return 16; 
break;
case 84: return 55; 
break;
case 85: return 71; 
break;
case 86: return 12; 
break;
case 87: return 13; 
break;
case 88: return 14; 
break;
case 89: return 17; 
break;
case 90: return 18; 
break;
case 91: return 56; 
break;
case 92: return 57; 
break;
case 93: /* skip comment */ 
break;
case 94: return 5; 
break;
}
},
rules: [/^(?:["])/,/^(?:['])/,/^(?:[`])/,/^(?:\\x[0-9a-fA-F]{2})/,/^(?:\\u[0-9a-fA-F]{4})/,/^(?:\\u\{[0-9a-fA-F]{1,6}\})/,/^(?:\\0)/,/^(?:\\')/,/^(?:\\")/,/^(?:\\`)/,/^(?:\\\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\v)/,/^(?:\\t)/,/^(?:\\b)/,/^(?:\\f)/,/^(?:[\\](\r\n|\r|\n)\s*)/,/^(?:\\.)/,/^(?:(\r\n|\r|\n)+)/,/^(?:$)/,/^(?:["])/,/^(?:['])/,/^(?:[`])/,/^(?:.)/,/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:,)/,/^(?:;)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:first\b)/,/^(?:with\b)/,/^(?:each\b)/,/^(?:NaN\b)/,/^(?:Infinity\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:endif\b)/,/^(?:in\b)/,/^(?:done\b)/,/^(?:do\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:[\p{Alphabetic}_$][\p{Alphabetic}0-9_$]*\b)/u,/^(?:[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?\b)/,/^(?:0x[0-9A-Fa-f]+\b)/,/^(?:0o[0-7]+\b)/,/^(?:0b[01]+\b)/,/^(?:\.\.)/,/^(?::)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:>>>)/,/^(?:<<)/,/^(?:>>)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:<>)/,/^(?:\^)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\|)/,/^(?:~)/,/^(?:\?\?)/,/^(?:\?#)/,/^(?:\?\.)/,/^(?:\?\[)/,/^(?:\?)/,/^(?:=)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:#[^\r\n]*)/,/^(?:$)/],
conditions: {"STRB":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24],"inclusive":false},"STRS":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,24],"inclusive":false},"STRD":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24],"inclusive":false},"INITIAL":{"rules":[0,1,2,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
/* --------------------------------- lexp executive ------------------------------- */

    const f_min = function( ...args ) {
        let res = null;
        let n = args.length;
        for ( let i=0; i<n; i++ ) {
            let v = args[ i ];
            if ( Array.isArray( v ) ) {
                v = f_min.apply( null, v );
                if ( null !== v && ( null === res || v < res ) ) {
                    res = v;
                }
            } else if ( "number" === typeof v ) {
                if ( null === res || v < res ) {
                    res = v;
                }
            }
        }
        return res;
    }

    const f_max = function( ...args ) {
        let res = null;
        let n = args.length;
        for ( let i=0; i<n; i++ ) {
            let v = args[ i ];
            if ( Array.isArray( v ) ) {
                v = f_max.apply( null, v );
                if ( null !== v && ( null === res || v > res ) ) {
                    res = v;
                }
            } else if ( "number" === typeof v ) {
                if ( null === res || v > res ) {
                    res = v;
                }
            }
        }
        return res;
    }

    const nativeFuncs = {
          abs       : { nargs: 1, impl: (v) => v >= 0 ? v : -v }
        , sign      : { nargs: 1, impl: Math.sign }
        , floor     : { nargs: 1, impl: Math.floor }
        , ceil      : { nargs: 1, impl: Math.ceil }
        , round     : { nargs: 2, impl: function( n, p ) { return Math.round( n * Math.pow(10, p || 0) ) / Math.pow(10, p || 0); } }
        , trunc     : { nargs: 1, impl: Math.trunc }
        , cos       : { nargs: 1, impl: Math.cos }
        , sin       : { nargs: 1, impl: Math.sin }
        , tan       : { nargs: 1, impl: Math.tan }
        , log       : { nargs: 1, impl: Math.log }
        , exp       : { nargs: 1, impl: Math.exp }
        , pow       : { nargs: 2, impl: Math.pow }
        , sqrt      : { nargs: 1, impl: Math.sqrt }
        , random    : { nargs: 0, impl: Math.random }
        , min       : { nargs: 1, impl: function( ...args ) { return f_min( null, ...args ); } }
        , max       : { nargs: 1, impl: function( ...args ) { return f_max( null, ...args ); } }
        , len       : { nargs: 1, impl: (s) => s.length }
        , substr    : { nargs: 2, impl: function( s, p, l ) { s = String(s); if (l==undefined) l=s.length; return s.substr(p,l); } }
        , upper     : { nargs: 1, impl: (s) => String(s).toUpperCase() }
        , lower     : { nargs: 1, impl: (s) => String(s).toLowerCase() }
        , match     : { nargs: 2, impl: function( s, p, n, f ) { let r = String(s).match( new RegExp( p, f ) ); return ( r === null ) ? null : r[n || 0]; } }
        , find      : { nargs: 2, impl: function( s, p, f ) { let r = String(s).match( new RegExp( p, f ) ); return ( r === null ) ? -1 : r.index; } }
        , replace   : { nargs: 3, impl: function( s, p, r, f ) { return String(s).replace( new RegExp( p, f ), r ); } }
        , rtrim     : { nargs: 1, impl: (s) => String(s).replace( /\s+$/, "" ) }
        , ltrim     : { nargs: 1, impl: (s) => String(s).replace( /^\s+/, "" ) }
        , trim      : { nargs: 1, impl: (s) => String(s).trim() }
        , split     : { nargs: 2, impl: (s,p,n) => String(s).split( p, n ) }
        , "int"     : { nargs: 1, impl: parseInt }
        , "float"   : { nargs: 1, impl: parseFloat }
        , "bool"    : { nargs: 1, impl: function( s ) { return !!s && null === String(s).match( /^\s*(0|no|off|false)\s*$/i ); } }
        , str       : { nargs: 1, impl: (s) => String(s) }
        , hex       : { nargs: 1, impl: (n) => Number( n ).toString( 16 ) }
        , time      : { nargs: 0, impl: function(...args) {
            if ( args.length > 1 && "number" === typeof( args[1] ) ) { args[1] -= FEATURE_MONTH_BASE; }
            return new Date(...args).getTime() } }
        , dateparts : { nargs: 0, impl: function( t ) { let d = new Date(t); return { year: d.getFullYear(), month: d.getMonth()+FEATURE_MONTH_BASE, day: d.getDate(),
            hour: d.getHours(), minute: d.getMinutes(), second: d.getSeconds(), weekday: d.getDay() }; } }
        , "isNaN"   : { nargs: 1, impl: (n) => Number.isNaN(n) || isNaN(n) }
        , isnull    : { nargs: 1, impl: (s) => "undefined" === typeof s || null === s }
        , isInfinity: { nargs: 1, impl: (s) => !isFinite(s) }
        , keys      : { nargs: 1, impl: Object.keys }
        , values    : { nargs: 1, impl: Object.values }
        , clone     : { nargs: 1, impl: (a) => JSON.parse( JSON.stringify( a ) ) }
        , join      : { nargs: 2, impl: (a,s) => a.join(s) }
        , list      : { nargs: 0, impl: function( ...args ) { return args; } }
        , indexOf   : { nargs: 2, impl: (a,el) => a.indexOf( el ) }
        , count     : { nargs: 1, impl: function( a ) { let n=0; Array.isArray( a ) ? a.forEach( el => { ( "undefined" !== typeof el && null !== el ) ? ++n : n } ) : n; return n; } }
        , sum       : { nargs: 1, impl: function( a ) { let n=0; Array.isArray( a ) ? a.forEach( el => { ( "number" === typeof el ) ? n += el : 0 } ) : 0; return n; } }
        , concat    : { nargs: 2, impl: (a,b) => (a||[]).concat(b||[]) }
        , slice     : { nargs: 2, impl: (a,s,e) => (a||[]).slice( s, e ) }
        , insert    : { nargs: 2, impl: (a,p,...el) => { a.splice( p, 0, ...el ); return a; } }
        , remove    : { nargs: 2, impl: (a,s,n) => { a.splice( s, "undefined" === typeof n ? 1 : n ); return a; } }
        , push      : { nargs: 2, impl: (a,v,n) => { a = a || []; a.push(v); if ( n && a.length > n ) a.splice( 0, a.length-n ); return a; } }
        , pop       : { nargs: 1, impl: (a) => a.pop() }
        , unshift   : { nargs: 2, impl: (a,v,n) => { a = a || []; a.unshift(v); if ( n && a.length > n ) a.splice( n, a.length-n ); return a; } }
        , shift     : { nargs: 1, impl: (a) => a.shift() }
        , isArray   : { nargs: 1, impl: Array.isArray }
        , isObject  : { nargs: 1, impl: (p) => null !== p && "object" === typeof p }
        , toJSON    : { nargs: 1, impl: JSON.stringify }
        , parseJSON : { nargs: 1, impl: JSON.parse }
        , btoa      : { nargs: 1, impl: (b) => Buffer.from( b, "utf-8" ).toString( "base64" ) }
        , atob      : { nargs: 1, impl: (a) => Buffer.from( a, "base64" ).toString( "utf-8" ) }
        , urlencode : { nargs: 1, impl: encodeURIComponent }
        , urldecode : { nargs: 1, impl: decodeURIComponent }
/* FUTURE:
        , format
        , sort
        , dateadd
        , hsltorgb
        , rgbtohsl
*/
    };

    var D = false ? console.log : function() {};

    var run = function( ce, ctx ) {
        ctx = ctx || {};

        function is_atom( v, typ ) {
            return null !== v && "object" === typeof( v ) &&
                "undefined" !== typeof v.__atom &&
                ( !typ || v.__atom === typ );
        }

        function N( v ) {
            return "undefined" === typeof v ? null : v;
        }

        /* Resolve a VREF atom */
        function _resolve( a ) {
            /* Scope priority: local, context, external resolver */
            var res;
            if ( "undefined" !== typeof (ctx.__lvar || {})[a.name] ) {
                res = ctx.__lvar[a.name];
            } else if ( "undefined" !== typeof ctx[a.name] ) {
                res = ctx[a.name];
            } else if ( "function" === typeof (ctx._func || {})._resolve ) {
                res = ctx._func._resolve( a.name, ctx );
            }
            return N(res);
        }

        function _run( e ) {
            if ( !is_atom( e ) ) {
                if ( Array.isArray( e ) ) {
                    /* Run each element within array */
                    let res = [];
                    let n = e.length;
                    for ( let k=0; k<n; ++k ) {
                        res[k] = _run( e[k] );
                    }
                    return res;
                } else if ( null !== e && "object" === typeof e ) {
                    let res = {};
                    Object.keys( e ).forEach( key => {
                        res[ key ] = _run( e[ key ] );
                    });
                    return res;
                }
                return e; /* return primitive as it is. */
            } else {
                /* Handle atom */
                if ( is_atom( e, 'list' ) ) {
                    let v = null;
                    e.expr.forEach( function( se ) {
                        v = _run( se );
                    });
                    return N(v);
                } else if ( is_atom( e, 'vref' ) ) {
                    return N( _resolve( e ) );
                } else if ( is_atom( e, 'binop' ) ) {
                    var v2 = e.v2;
                    var v1 = e.v1;
                    var v1eval, v2eval;
                    if ( "=" !== e.op ) {
                        v1eval = _run( v1 );
                    }
                    if ( e.op !== "&&" && e.op !== "||" && e.op !== '??' && e.op !== '?#' ) {
                        v2eval = _run( v2 );
                    }
                    // D("binop v1=",v1,", v1eval=",v1eval,", v2=",v2,", v2eval=",v2);
                    if (e.op == '+') {
                        // Special case for plus (+): if either operand is string, treat as concat
                        if ( "string" === typeof v1eval || "string" === typeof v2eval ) {
                            v1eval = ( null === v1eval ? "" : v1eval.toString() ) + ( null === v2eval ? "" : v2eval.toString() );
                        } else {
                            v1eval += v2eval;
                        }
                    }
                    else if (e.op == '-')
                        v1eval -= v2eval;
                    else if (e.op == '*')
                        v1eval *= v2eval;
                    else if (e.op == '/')
                        v1eval /= v2eval;
                    else if (e.op == '**')
                        v1eval = v1eval**v2eval;
                    else if (e.op == '%')
                        v1eval %= v2eval;
                    else if (e.op == '&')
                        v1eval &= v2eval;
                    else if (e.op == '|')
                        v1eval |= v2eval;
                    else if (e.op == '^')
                        v1eval ^= v2eval;
                    else if (e.op == '>')
                        v1eval = v1eval > v2eval;
                    else if (e.op == '>=')
                        v1eval = v1eval >= v2eval;
                    else if (e.op == '<')
                        v1eval = v1eval < v2eval;
                    else if (e.op == '<=')
                        v1eval = v1eval <= v2eval;
                    else if (e.op == '==')
                        v1eval = v1eval == v2eval;
                    else if (e.op == '===')
                        v1eval = v1eval === v2eval;
                    else if (e.op == '!=')
                        v1eval = v1eval != v2eval;
                    else if (e.op == '!==')
                        v1eval = v1eval !== v2eval;
                    else if (e.op == '<<' )
                        v1eval = v1eval << v2eval;
                    else if (e.op == '>>' )
                        v1eval = v1eval >> v2eval;
                    else if (e.op == '>>>' )
                        v1eval = v1eval >>> v2eval;
                    else if (e.op == '&&') {
                        /* short-cut evaluation */
                        v1eval = v1eval && _run( v2 );
                    } else if (e.op == '||') {
                        /* short-cut evaluation */
                        v1eval = v1eval || _run( v2 );
                    } else if (e.op == 'in' ) {
                        v1eval = v1eval in v2eval;
                    } else if (e.op == '??' ) {
                        v1eval = ( null === N(v1eval) ) ? _run( v2 ) : v1eval;
                    } else if (e.op == '?#' ) {
                        v1eval = ( null === N(v1eval) || Number.isNaN(v1eval) || isNaN(v1eval) ) ? _run( v2 ) : parseFloat( v1eval );
                    } else if ( ".." === e.op ) {
                        /* Range op */
                        let res = [];
                        if ( "number" !== typeof v1eval || "number" !== typeof v2eval ) {
                            throw new TypeError( "Non-numeric operand to range operator" );
                        }
                        let n = Math.floor( v1eval );
                        v2eval = Math.floor( v2eval );
                        let l = Math.abs( v2eval - n ) + 1;
                        if ( l > MAX_RANGE ) {
                            throw new Error("Range exceeds maximum differential of " + String(MAX_RANGE) );
                        }
                        if ( v2eval >= n ) {
                            while ( n <= v2eval ) {
                                res.push( n++ );
                            }
                        } else {
                            while ( n >= v2eval ) {
                                res.push( n-- );
                            }
                        }
                        v1eval = res;
                    } else if (e.op == '=' ) {
                        /* Assignment */
                        if ( ! is_atom( v1, 'vref' ) ) {
                            throw new SyntaxError("Invalid assignment target");
                        }
                        if ( ! ( ctx.__lvar && "object" === typeof ctx.__lvar ) ) {
                            throw new Error("Assignments not permitted here; or did you mean to use \"==\" ?");
                        }
// D("run() assign",v2eval,"to",v1.name);
                        ctx.__lvar[v1.name] = v2eval;
                        return v2eval;
                    } else {
                        D( e );
                        throw new Error('BUG: unsupported op in compiled expression: ' + e.op);
                    }
                    return v1eval;
                } else if ( is_atom( e, 'unop' ) ) {
                    var veval = _run( e.val );
                    if (e.op == '-')
                        veval = -veval;
                    else if (e.op == '!')
                        veval = !veval;
                    else if (e.op == '~')
                        veval = ~veval;
                    else
                        throw new Error('BUG: unsupported unop in compiled expression: ' + e.op);
                    return veval;
                } else if ( is_atom( e, 'deref' ) ) {
                    var scope = _run( e.context );
                    /* Watch for null-conditional operators */
                    if ( ( e.op === '?.' || e.op == '?[' ) && scope === null ) {
                        return null;
                    }
                    if ( "object" !== typeof scope || null === scope ) {
                        throw new ReferenceError("Invalid reference to member "+String(e.member)+" of "+String(scope));
                    }
                    var member = _run( e.member );
                    /* ??? member must be primitive? */
                    var res = _run( scope[ member ] );
                    return N(res);
                } else if ( is_atom( e, 'if' ) ) {
                    /* Special short-cut function */
                    var cond = _run( e.test );
                    var ifresult;
                    if ( cond ) {
                        ifresult = _run( e.tc );
                    } else if ( "undefined" !== typeof e.fc ) {
                        ifresult = _run( e.fc );
                    } else {
                        ifresult = null;
                    }
                    return N(ifresult);
                } else if ( is_atom( e, 'fref' ) ) {
                    // D('function ref ' + e.name + ' with ' + e.args.length + ' args');
                    var name = e.name;
                    var impl = undefined;
                    if ( nativeFuncs[name] ) {
                        // Native function implementation
                        impl = nativeFuncs[name].impl;
                    } else if ( ctx._func && "function" === typeof ctx._func[name] ) {
                        // Attached to context
                        impl = ctx._func[name];
                    } else {
                        throw new ReferenceError('Undefined function: ' + name);
                    }

                    // Build argument list.z
                    var a = [];
                    e.args.forEach( function( se ) {
                        a.push( _run( se ) );
                    });
                    var r = impl.apply( null, a );
                    return N(r);
                } else if ( is_atom( e, 'iter' ) ) {
                    ctx.__lvar = ctx.__lvar || {};
                    let context = N( _run( e.context ) );
                    let res = [];
                    if ( null !== context ) {
                        // D(e);
                        if ( "object" !== typeof context ) {
                            context = [ context ];
                        }
                        // D("Iterate over",context,"using",e.value,"apply",e.exec);
                        for ( [ key, value ] of Object.entries( context ) ) {
                            // D("Assigning",value,"to",e.value);
                            ctx.__lvar[ e.value ] = value;
                            if ( e.key ) {
                                ctx.__lvar[ e.key ] = Array.isArray( context ) ? parseInt( key ) : key;
                            }
                            // D("Running",e.exec);
                            let v = _run( e.exec );
                            // D("result",v);
                            if ( v !== null ) {
                                res.push( v );
                            }
                        }
                    }
                    return res;
                } else if ( is_atom( e, 'search' ) ) {
                    let context = N( _run( e.context ) );
                    let res = null;
                    if ( null !== context ) {
                        ctx.__lvar = ctx.__lvar || {};
                        // D(e);
                        // D("Search",context,"using",e.value,"for",e.exec);
                        if ( "object" !== typeof context ) {
                            context = [ context ];
                        }
                        for ( const [key, value] of Object.entries( context ) ) {
                            // D("Assigning",value,"to",e.value);
                            ctx.__lvar[ e.value ] = value;
                            if ( e.key ) {
                                ctx.__lvar[ e.key ] = key;
                            }
                            let v = _run( e.exec );
                            if ( !!v ) {
                                res = value;
                                break;
                            }
                        }
                    }
                    return res;
                } else {
                    D("BUG: unsupported atom:", e);
                    throw new Error('BUG: unsupported atom ' + String(e.__atom));
                }
            }
        } /* function _run() */

        D("lexp.run()", ce, ctx);
        var result = _run( ce );
        D("lexp.run() finished with", result);
        return result;
    };

    return {
        version: version,
        compile: function( expr ) {
            return parser.parse( expr );
        },
        run: run,
        evaluate: function( expr, context ) {
            return run( parser.parse( expr ), context );
        }
    };
}));
